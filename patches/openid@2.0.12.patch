diff --git a/openid.js b/openid.js
index 3a20a6e074c98e368b53b16ffdb40c4b4c1de187..b71ee02506e9c0d274f14f636cfd3e0a08ab4aba 100644
--- a/openid.js
+++ b/openid.js
@@ -29,8 +29,7 @@
 var Buffer = require('buffer').Buffer,
     crypto = require('crypto'),
     http = require('./http'),
-    querystring = require('querystring'),
-    url = require('url'),
+    qs = require('qs'),
     xrds = require('./lib/xrds');
 
 var _associations = {};
@@ -195,27 +194,20 @@ openid.loadDiscoveredInformation = function(key, callback)
 
 var _buildUrl = function(theUrl, params)
 {
-  theUrl = url.parse(theUrl, true);
+  theUrl = new URL(theUrl);
   delete theUrl['search'];
   if(params)
   {
-    if(!theUrl.query)
+    for(var key in params)
     {
-      theUrl.query = params;
-    }
-    else
-    {
-      for(var key in params)
+      if(hasOwnProperty(params, key))
       {
-        if(hasOwnProperty(params, key))
-        {
-          theUrl.query[key] = params[key];
-        }
+        theUrl.searchParams.set(key, params[key]);
       }
     }
   }
 
-  return url.format(theUrl);
+  return theUrl.toString();
 }
 var _decodePostData = function(data)
 {
@@ -476,7 +468,7 @@ var _resolveHtml = function(identifier, callback, hops, data)
 
 var _resolveHostMeta = function(identifier, strict, callback, fallBackToProxy)
 {
-  var host = url.parse(identifier);
+  var host = new URL(identifier);
   var hostMetaUrl;
   if(fallBackToProxy && !strict)
   {
@@ -912,7 +904,7 @@ openid.verifyAssertion = function(requestOrUrl, originalReturnUrl, callback, sta
         });
         
         requestOrUrl.on('end', function() {
-          var params = querystring.parse(data);
+          var params = qs.parse(data);
           return _verifyAssertionData(params, callback, stateless, extensions, strict);
         });
       }
@@ -928,8 +920,8 @@ openid.verifyAssertion = function(requestOrUrl, originalReturnUrl, callback, sta
     assertionUrl = requestOrUrl.url;
   }
 
-  assertionUrl = url.parse(assertionUrl, true);
-  var params = assertionUrl.query;
+  assertionUrl = new URL(assertionUrl);
+  var params = qs.parse(assertionUrl.searchParams.toString());
 
   if (!_verifyReturnUrl(assertionUrl, originalReturnUrl)) {
       return callback({ message: 'Invalid return URL' });
@@ -938,16 +930,16 @@ openid.verifyAssertion = function(requestOrUrl, originalReturnUrl, callback, sta
 }
 
 var _verifyReturnUrl = function (assertionUrl, originalReturnUrl) {
-  var receivedReturnUrl = assertionUrl.query['openid.return_to'];
+  var receivedReturnUrl = assertionUrl.searchParams.get('openid.return_to');
   if (!_isDef(receivedReturnUrl)) {
     return false;
   }
 
-  receivedReturnUrl = url.parse(receivedReturnUrl, true);
+  receivedReturnUrl = new URL(receivedReturnUrl);
   if (!receivedReturnUrl) {
     return false;
   }
-  originalReturnUrl = url.parse(originalReturnUrl, true);
+  originalReturnUrl = new URL(originalReturnUrl);
   if (!originalReturnUrl) {
     return false;
   }
@@ -960,8 +952,8 @@ var _verifyReturnUrl = function (assertionUrl, originalReturnUrl) {
 
   // Any query parameters that are present in the "openid.return_to" URL MUST also be present 
   // with the same values in the URL of the HTTP request the RP received
-  for (var param in receivedReturnUrl.query) {
-    if (hasOwnProperty(receivedReturnUrl.query, param) && receivedReturnUrl.query[param] !== assertionUrl.query[param]) {
+  for (var param in receivedReturnUrl.searchParams) {
+    if (receivedReturnUrl.searchParams.has(param) && receivedReturnUrl.searchParams.get(param) !== assertionUrl.searchParams.get(param)) {
       return false;
     }
   }
